[project]
name = "bugninja-backend"
version = "0.1.0"
description = "Bugninja Platform Backend API"
authors = [
    {name = "Bugninja Team"}
]
dependencies = [
    "alembic==1.16.4",
    "asyncpg==0.30.0",
    "browser-use[memory]==0.2.5",
    "bugninja",
    "celery[redis]==5.5.3",
    "cssselect==1.3.0",
    "cuid2==2.0.1",
    "faker==37.4.0",
    "fastapi==0.115.13",
    "hypercorn==0.17.3",
    "isort==6.0.1",
    "lxml==5.4.0",
    "openai==1.84.0",
    "polyfactory>=2.22.0",
    "psycopg2-binary==2.9.10",
    "pydantic==2.10.6",
    "pydantic-settings==2.10.1",
    "python-dotenv==1.1.0",
    "rich==14.0.0",
    "ruff==0.11.13",
    "sqlalchemy==2.0.41",
    "sqlmodel==0.0.24",
    "types-lxml==2025.3.30",
    "uvicorn==0.35.0",
    "uvloop==0.21.0",
]
requires-python = ">= 3.11"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "black==25.1.0",
    "isort==6.0.1",
    "mypy==1.16.0",
]

[tool.uv.sources]
bugninja = { git = "https://github.com/bugninja-ai/bugninja-experiment", rev = "akos/experimenting-with-browser-use" }

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"] # ignore unused imports in __init__.py files
"test_*.py" = ["F401", "F403", "F811"]  # ignore unused imports in test files as well

[tool.black]
line-length = 100
target-version = ["py313"]

[tool.isort]
profile = "black"
extend_skip = ["__init__.py"]

[tool.mypy]
python_version = "3.13"
strict = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true


[tool.poe.tasks]

#TODO! this is only a temporary development helping functionality, should be removed in the future
[tool.poe.tasks.update-dep]
help   = "Update the Bugninja dependencies to the latest version of a branch"
shell = "uv add git+https://github.com/bugninja-ai/bugninja-experiment@akos/experimenting-with-browser-use"

[tool.poe.tasks.dev]
help   = "Run the backend in development mode"
shell = "uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 6969"

[tool.poe.tasks.prod]
help   = "Run the backend in development mode"
shell = "uv run hypercorn app.main:app --bind 0.0.0.0 --port 6969"

[tool.poe.tasks.test]
help   = "Run tests on the project"
shell = "uv run pytest tests"

[tool.poe.tasks.lint]
help   = "Lints the whole project searching for inefficiencies in the code"
shell = "uv run ruff check --fix --exclude alembic/env.py . app && uv run isort . app && uv run black . && uv run mypy app"

#? Migration related commands
[tool.poe.tasks.revision-db]
help   = "Create autogenerated migration file based on current DB tables and the connected DB"
shell = "uv run alembic revision --autogenerate -m ${name}"

[[tool.poe.tasks.revision-db.args]]
name = "name"
options = ["-n", "--name"]
help = "Name of the latest revision"
default = ""

[tool.poe.tasks.upgrade-db]
help   = "Upgrade the database to the latest version of Alembic migration"
shell = "uv run alembic upgrade head"

[tool.poe.tasks.downgrade-db]
help   = "Downgrade the database to the previous version of Alembic migrations"
shell = "uv run alembic downgrade -1"


[tool.poe.tasks.create-mock-data]
help   = "Fill database with mock data for manual testing purposes"
shell = "uv run python dev/upload_mock_data.py"


[tool.poe.tasks.empty-db]
help   = "Delete all data from the database without confirmation"
shell = "uv run python dev/delete_all_data.py --force"

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
[[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
name = "black"
type = "console_scripts"
entrypoint = "black"
options = "-l 79 REVISION_SCRIPT_FILENAME"
#
[[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
name = "ruff"
type = "module"
module = "ruff"
options = "check --fix REVISION_SCRIPT_FILENAME"

[[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
name = "ruff"
type = "exec"
executable = "ruff"
options = "check --fix REVISION_SCRIPT_FILENAME"

