"""add_test_case_adjustments

Revision ID: e012903566e2
Revises: cad0ebf74a67
Create Date: 2025-07-22 13:48:04.433906

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel.sql.sqltypes import AutoString

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e012903566e2"
down_revision: Union[str, Sequence[str], None] = "cad0ebf74a67"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    priority_enum = postgresql.ENUM(
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL",
        name="testcasepriority",
        create_type=False,
    )
    bind = op.get_bind()

    priority_enum.create(bind, checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "testcase",
        sa.Column(
            "priority",
            priority_enum,
            nullable=True,
        ),
    )
    op.add_column(
        "testcase",
        sa.Column(
            "category",
            AutoString(length=255),
            nullable=True,
        ),
    )
    # ### end Alembic commands ###

    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "historyelement",
        "action_finished_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )

    op.alter_column(
        "testrun",
        "finished_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "testrun",
        "finished_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.drop_column("testcase", "category")
    op.drop_column("testcase", "priority")
    op.alter_column(
        "historyelement",
        "action_finished_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    # ### end Alembic commands ###

    bind = op.get_bind()
    testcasepriority_enum = postgresql.ENUM(name="testcasepriority", create_type=False)
    testcasepriority_enum.drop(bind, checkfirst=True)
